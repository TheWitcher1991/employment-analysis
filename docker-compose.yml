name: employment-analysis

version: '3.7'

x-deploy:
  &default-deploy
  deploy:
    resources:
      limits:
        cpus: 0.5
        memory: 512m

configs:
  postgres-exporter-config:
    file: ./docker/postgres/queries.yaml

services:
  etl:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: etl-service
    environment:
      POSTGRES_URI: ${POSTGRES_URI}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shared
    restart: no

  postgres:
    image: postgres:16-alpine
    container_name: postgres-service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    networks:
      - shared
    restart: always
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U $$POSTGRES_USER' ]
      interval: 10s
      timeout: 5s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:8.11.0
    container_name: pgadmin-service
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '8080:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shared
    restart: always

  superset:
    build:
      context: ./docker/superset
      dockerfile: Dockerfile
    container_name: superset-service
    environment:
      SUPERSET_LOAD_EXAMPLES: 'yes'
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
      SQLALCHEMY_DATABASE_URL: ${POSTGRES_URI}
    ports:
      - '8088:8088'
    volumes:
      - superset_home:/app/superset_home
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shared
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus-service
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--log.level=warn'
    ports:
      - '9090:9090'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shared
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana-service
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_LOG_MODE: console
      GF_LOG_LEVEL: critical
      GF_PANELS_ENABLE_ALPHA: true
      GF_FEATURE_TOGGLES_ENABLE: 'accessControlOnCall lokiLogsDataplane'
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - shared
    restart: unless-stopped

  postgres-exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres-exporter-service
    configs:
      - source: postgres-exporter-config
        target: /etc/postgres_exporter/queries.yaml
    environment:
      DATA_SOURCE_URI: ${DATA_SOURCE_URI}
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
      PG_EXPORTER_EXTEND_QUERY_PATH: '/etc/postgres_exporter/queries'
    ports:
      - '9187:9187'
    networks:
      - shared
    restart: always

  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node-exporter-service
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - shared
    restart: unless-stopped

networks:
  shared:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  superset_home:
  prometheus_data:
  grafana_data:
